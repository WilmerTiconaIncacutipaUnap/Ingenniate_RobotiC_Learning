@page "/AltaUsuario"
@inject NavigationManager navigationManager
@inject HttpClient ClienteHttp
@inject ILogger<AltaUsuario> l;
@inject IServicesTienda servicioTienda

<!--hola cambio uno-->
<br />
<div class="container h-100">
    <div class="row h-100 justify-content-center align-items-center">
        <div class="col-12 col-md-10 col-lg-8">
            <EditForm Model="@nuevoUsuario" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <h3 class="text-center">Alta Usuario</h3>
                <hr />
                <ValidationSummary />
                <div class="form-group row">
                    <label for="Nombre" class="col-sm-2 col-form-label">
                        Nombre
                    </label>
                    <div class="col-sm-10">
                        <InputText id="Nombre" class="form-control" placeholder="Nombre"
                                   @bind-Value="nuevoUsuario.Nombre" />
                        <ValidationMessage For="@(() => nuevoUsuario.Nombre)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="Apellido" class="col-sm-2 col-form-label">
                        Apellido
                    </label>
                    <div class="col-sm-10">
                        <InputText id="Apellido" class="form-control" placeholder="Apellido"
                                   @bind-Value="nuevoUsuario.Apellido" />
                        <ValidationMessage For="@(() => nuevoUsuario.Apellido)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="Email" class="col-sm-2 col-form-label">
                        Email
                    </label>
                    <div class="col-sm-10">
                        <InputText id="Email" class="form-control" placeholder="Email"
                                   @bind-Value="nuevoUsuario.Email" />
                        <ValidationMessage For="@(() => nuevoUsuario.Email)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="Password" class="col-sm-2 col-form-label">
                        Password
                    </label>
                    <div class="col-sm-10">
                        <InputText type="password" id="password" class="form-control" placeholder="Password"
                                   @bind-Value="nuevoUsuario.Password" />
                        <ValidationMessage For="@(() => nuevoUsuario.Password)" />
                    </div>
                </div>
                <div class="row content">
                    <div class="col-md-6">
                        <input type="submit" class="btn btn-primary" value="Guardar" @onclick="NuevaAlta" />
                    </div>
                    <div class="col-md-6">
                        <input type="button" value="Cancelar" class="btn btn-danger" @onclick="Cancelar" />
                    </div>
                </div>
            </EditForm>
            @urlResultado
        </div>
    </div>
</div>



@if (mostrarError)
{
    <DetallesError OnCerrar="@(() => cerrarCapa())" TextoError="@mensajeError"></DetallesError>
}

@code {
    Usuario nuevoUsuario = new Usuario();
    Boolean mostrarError = false;
    String mensajeError = String.Empty;
    String urlResultado = String.Empty;

    public void HandleValidSubmit()
    {
        Console.WriteLine("OnValidSubmit");
    }

 
    async protected void NuevaAlta()
    {
        try
        {

            if (nuevoUsuario.Email != null && nuevoUsuario.Password != null &&
                nuevoUsuario.Nombre != null && nuevoUsuario.Apellido != null)
            {
                urlResultado = await servicioTienda.AltaUsuario(nuevoUsuario);
            }
        }
        catch (Exception ex)
        {
            l.LogError("Se produjo un error: " + ex.ToString());
            mostrarError = true;
            mensajeError = ex.Message;

        }
        finally
        {
            StateHasChanged();
        }

    }

    protected void Cancelar()
    {
        navigationManager.NavigateTo("/");
    }

    private void cerrarCapa()
    {
        mostrarError = false;
    }



}
